# -*- shell-script -*-

case "x$TERM" in
  xxterm*|xscreen)
    # probably can support title bar setting with ansi codes
    settitle () {
      echo -en "\033]0;$1\a"
    }
    ;;
esac
    
if tput tsl >/dev/null; then
  # definitely supports title bar/status line setting
  settitle () {
    tput tsl; echo -n "$1"; tput fsl
  }
fi

setenv () {
  export $1="$2"
}

unsetenv () {
  unset $*
}

lr () {
  ls -alR $* | less
}

range () {
  echo '[li p' ${3-1} '+ d si' $2 '!<a] sa' $1 'silax' | dc
}

which () {
  local doall=
  local shellin=
  local usage="usage:  which [ -a ] [ -s ] prog [ prog ... ]
        -a := show all matches
        -s := show path only"

  if [ "$1" = "" ]; then
    echo $usage
    return
  fi
  if [ "$1" = "-a" -o "$1" = "-s" ]; then
    if [ "$1" = "-a" ]; then
      doall=-all
    else
      shellin=-path
    fi
    shift
  fi
  if [ "$1" = "-a" -o "$1" = "-s" ]; then
    if [ "$1" = "-a" ]; then
      doall=-all
    else
      shellin=-path
    fi
    shift
  fi
  if [ "$1" = "" ]; then
    echo $usage
    return
  fi

  while [ "$1" != "" ]
    do

    if [ "$1" != "`basename $1`" ]; then
      echo "which: do not specify a path"
      return
    fi

    type $doall $shellin $1

    shift
    done
}

memorize () {
  if [ -f $MEMORY_FILE ]; then
    echo "-- " >> $MEMORY_FILE
  fi

  case "x$1" in
    x)
      echo "enter text to be memorized"
      cat - >> $MEMORY_FILE
      echo "text has been memorized"
      ;;
    *)
      echo "$@" >> $MEMORY_FILE
      echo "arguments have been memorized"
      ;;
  esac
}

remember () {
  if [ -f $MEMORY_FILE ]; then
    case "x$1" in
      x)
        less -i $MEMORY_FILE
        ;;
      *)
        grep -i "$1" $MEMORY_FILE | less -i
        ;;
    esac
  fi
}

## functions for bluehost/EIG

k () {
  ssh keyserv.unifiedlayer.com "$1"
}

# from quora:
# http://www.quora.com/What-are-some-of-the-best-command-prompt-or-terminal-tricks

extract () {
   if [ -f "$1" ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf "$1"    ;;
           *.tar.gz)    tar xvzf "$1"    ;;
           *.bz2)       bunzip2 "$1"     ;;
           *.rar)       unrar x "$1"     ;;
           *.gz)        gunzip "$1"      ;;
           *.tar)       tar xvf "$1"     ;;
           *.tbz2)      tar xvjf "$1"    ;;
           *.tgz)       tar xvzf "$1"    ;;
           *.zip)       unzip "$1"       ;;
           *.Z)         uncompress "$1"  ;;
           *.7z)        7z x "$1"        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi
}

weather() {
    wu="http://api.wunderground.com/auto/wui/geo/ForcastXML/index.xml"
    curl -s "$wu?query=${@:-84123}" |
    gunzip |
    perl -ne 's/&amp;deg;/Â°/g;
              /<title>([^<]+)/ && printf "%s: ", $1;
              /<fcttext>([^<]+)/ && print $1, "\n"'
}

define() {
  curl -s "http://www.collinsdictionary.com/dictionary/english/$*" |
    sed -n '/class="def"/p' |
    awk '{gsub(/.*<span class="def">|<\/span>.*/,"");print}' |
    sed "s/<[^>]\+>//g" |
    par
}

epoch() {
  TESTREG="[\d{10}]"
  if [[ "$1" =~ $TESTREG ]]; then
    # is epoch
    date -d @$*
  else
    # is date
    if [ $# -gt 0 ]; then
      date +%s --date="$*"
    else
      date +%s
    fi
  fi
}

qtype () {
  # quiet type - just return the exit code
  type "$@" >/dev/null 2>&1
}

nkill () {
  usage="usage: nkill [ -u uid ] [ -s signal ] pattern"

  # defaults
  uid=`id -u`
  sig=TERM

  # process args
  while [ "$1" ]; do
    case "x$1" in
      x-u)
	uid="$2"
	shift; shift
	;;
      x-s)
	sig="$2"
	shift; shift;
	;;
      x)
	echo "no pattern passed"
	echo $usage
	return
	;;
      x*)
	pattern="$1"
	shift
	;;
    esac
  done

  # sanity check args
  case "x$uid" in
    x)
      echo "-u option specified but no uid given"
      echo $usage
      return
      ;;
    x*[^0-9]*)
      echo "uid for -u option must be numeric"
      echo $usage
      return
      ;;
  esac

  case "x$sig" in
    xSIG*)
      :
      ;;
    x[0-9]*)
      :
      ;;
    *)
      sig="SIG$sig"
      ;;
  esac
    
  if kill -l | grep -sqw "$sig"; then
    :
  else
    echo "unknown signal, select from one of these"
    kill -l
    echo $usage
    return
  fi

  if qtype pkill; then
    pkill -"$sig" -U "$uid" "$pattern"
  elif qtype killall; then
    killall -u "$uid" -"$sig" "$pattern"
  else
    ps -efu | awk '/$pattern/ {print $1, $2}' | awk '/^$uid / {print $2}' |
      while read pid; do
	kill -"$sig" $pid
      done
  fi
}

prompt_update () {
  case "$interactive" in
    true)
      :
      ;;
    *)
      return
      ;;
  esac
  
  # update the history
  history -a; history -c; history -r #nkill -s USR1 bash

  # virtual env active?
  if [ "$VIRTUAL_ENV" ]; then
    venv="(`basename \"$VIRTUAL_ENV\"`) "
  else
    venv=""
  fi

  # set the title bar/status line if we can
  qtype settitle && settitle "$(id -nu)@$(hostname -s):$(pwd)"

  # default in case __git_ps1 isn't there
  PS1="${venv}\u@\h:\w\n\! bash\\\$ "

  # set up the PS1, ugh, what a mess
  qtype __git_ps1 && __git_ps1 "${venv}\u@\h:\w" "\n\! bash\\\$ "
}
