#! /usr/bin/perl

# strip secrets out of dot files, replace with keywords, keep secrets
# somewhere safe(?)
#
# this is based on the dotsecrets package at
# https://github.com/oohlaf/dotsecrets.git

use strict;

use YAML::XS qw(DumpFile LoadFile);
use Digest::SHA qw(sha1_hex);
use NDBM_File;
use Fcntl;

our $configFile = $ENV{HOME} . '/Git/dotfiles/dot.yaml';
our $pwFile = $ENV{HOME} . '/Dropbox/dotsecrets';

sub munge {
    my $pw = shift;
    my $digest = sha1_hex($pw);
    return('SECRET:' . $digest . ':SECRET');
}

sub get {
    my $id = shift;
    my %h;

    tie %h, 'NDBM_File', $pwFile, O_RDWR, 0600 or
	die "couldn't tie $pwFile: $!\n";
    my $val = $h{$id};
    untie %h or die "couldn't untie $pwFile: $!\n";
    return $val;
}

sub put {
    my $id = shift;
    my $val = shift;

    my %h;
    tie %h, 'NDBM_File', $pwFile, O_RDWR|O_CREAT, 0600 or
	die "couldn't tie $pwFile: $!\n";
    $h{$id} = $val;
    untie %h or die "couldn't untie $pwFile: $!\n";
}

sub kill {
    my $id = shift;
    my %h;

    tie %h, 'NDBM_File', $pwFile, O_RDWR, 0600 or
	die "couldn't tie $pwFile: $!\n";
    delete($h{$id}) if exists($h{$id});
    untie %h or die "couldn't untie $pwFile: $!\n";
}

sub store {
    my $id = shift;
    my $pw = shift;
    my $token = shift;

    put($id, join($;, $pw, $token));
}

sub retrieve {
    my $id = shift;
    my $token = shift;

    my $i = get($id);
    my ($pw, $tk) = split(m/$;/, $i);
    die "id $id and token $token didn't match $tk\n" unless $tk eq $token;
    return $pw;
}

sub clean {
    my $rules = shift;

    while (<>) {
        study $_;
        foreach my $id (keys(%$rules)) {
            my $re = $rules->{$id};
            if (m/$re/) {
                my $text = $2;
                if ($text =~ m'^SECRET:' and $text =~ m':SECRET$') {
                    # already clean, don't clean it again!
                } else {
                    my $m = munge($text);
                    s/$re/$1$m$3/;
                    store($id, $text, $m);
                }
            }
        }
        print $_;
    }
}

sub smudge {
    my $rules = shift;

    while (<>) {
        study $_;
        foreach my $id (keys(%$rules)) {
            my $re = $rules->{$id};
            # embed SECRET in the re
            my @re = split(m/\)\(/, $re);
            splice(@re, 1, 0, 'SECRET:');
            splice(@re, 3, 0, ':SECRET');
            $re = join(')(', @re);
            if (m/$re/) {
                my $pw = retrieve($id, 'SECRET:' . $3 . ':SECRET');
                s/$re/$1$pw$5/;
            }
        }
        print $_;
    }
}

sub init {
    my $config = shift;
    
    for my $f (keys(%$config)) {
	for my $id (keys(%{$config->{$f}})) {
	    my $entry = get($id);
	    if ($entry eq "") {
		print "  no value for $id in $f, initialize it to ->";
		my $new_pw = <>;
		chomp($new_pw);
		# generate a token for this key
		my $new_token = munge($new_pw);
		store($id, $new_pw, $new_token);
		print "  stored new token\n";
		print "    $new_token\n";
		print "  for $f $id\n";
	    }
	}
    }
}

sub do_dump {
    my $config = shift;

    for my $f (keys(%$config)) {
	print "file $f:\n";
	for my $id (keys(%{$config->{$f}})) {
	    my $entry = get($id);
	    my ($pw, $tk) = split(m/$;/, $entry);
	    my $token = ($tk =~ m/SECRET:([^:]+):SECRET/)[0];
	    print "  \"$id\" -> \"$pw\" \"$token\"\n";
	}
    }
}

sub purge {
    my $config = shift;
    my $target_file = shift;
    my $target_id = shift;

    if (not exists($config->{$target_file})) {
	print "file $target_file is unknown\n";
	return;
    }
    if (not exists($config->{$target_file}->{$target_id})) {
	print "no known key \"$target_id\" for $target_file\n";
	return;
    }
    kill($target_id);
}

sub usage {
    print "usage:\n";
    print "  dot_secrets { init | dump }\n";
    print "  dot_secrets { purge file key }\n";
    print "  dot_secrets { clean | smudge } { file }\n";
}

sub main {
    my $config = LoadFile($configFile) or
	die "unable to load $configFile: $!\n";
    my $op = shift(@ARGV);
    my $op_func;

    if (not defined($op)) {
	usage();
        die "no operation specified\n";
    }

    if ($op eq 'init') {
	init($config);
	return;
    } elsif ($op eq 'dump') {
	do_dump($config);
	return;
    } elsif ($op eq 'purge') {
	my $id = shift(@ARGV);
	die "purge requires a key to purge\n" unless $id;
	purge($config, $id);
	return;
    }
	
    my $file = shift(@ARGV);
    if (not defined($file)) {
        die "file not specified\n";
    }
    if (not exists $config->{$file}) {
        die "$file not in config\n";
    }

    if ($op eq 'smudge') {
        $op_func = \&smudge;
    } elsif ($op eq 'clean') {
        $op_func = \&clean;
    } else {
        die "unknown operation $op, use one of 'smudge' or 'clean'\n";
    }

    $op_func->($config->{$file});
}

&main();
