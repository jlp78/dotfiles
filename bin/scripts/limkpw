#! /usr/bin/perl

# modified version of jlp+cpan@peterson.ath.cx mkpw script to make
# passwords compatible with LinkedIn password and sudo requirements.
#
# the requirements are: password must be at least 12 characters long
# and must meet three of the following conditions:  1. must contain
# a numeric character, 2. must contain an upper-case character, 3.
# must contain a lower-case character, 4. must contain at lease one
# of the following special characters: ! @ # $ % ^ & + =

use strict;
use Getopt::Long;
my $VERSION = 1.0;

my @numchars = ('0'..'9');
my @punchars = ('!', '@', '#', '$', '%', '^', '&', '+', '=');

my @dict_locations = ('/usr/share/dict/words', '/usr/dict/words',
                      '/usr/share/words');
my $debug;
my @words;
my %stopwords;

sub main {
    # defaults for getopt processing
    my $dict = '';
    my $num_pws = 1;
    my $help = 0;
    my $num_parts = 3;          # number of four-letter "words" to use

    GetOptions("dictionary=s" => \$dict,
               "num-pws=i"    => \$num_pws,
               "num-parts=i"  => \$num_parts,
               "verbose"      => \$debug,
               "help"         => \$help) or usage();
    &usage() if $help;
    if ($num_parts < 3) {
        warn "num-parts must be >= 3 to meet LinkedIn password requirements\n";
        warn "using 3 for num-parts\n";
        $num_parts = 3;
    }

    &load_dict($dict);

    &debug("generating $num_pws password(s)");
    TOP:
    for (my $i = 1; $i <= $num_pws; $i++) {
        my (@lwords, @parts, @num_sep, @pun_sep);
        &debug("password $i:");
        for (my $j = 0; $j < $num_parts; $j++) {
            my $word = $words[int(rand(scalar(@words)))];
            &debug("examing $word");
            redo if grep($_ eq $word, @lwords); # don't use the same word twice!
            &debug("selected $word");
            push(@lwords, $word);
        }

        # now select the parts of the words we have chosen
        foreach my $word (@lwords) {
            my $part;
            if (rand(1) < 0.5) {
                $part = substr($word, 0, 4);
            } else {
                $part = substr($word, length($word)-4);
            }

            # if the part we selected was also a four-letter word,
            # we just start all over again and get new words.
            if (exists($stopwords{$part})) {
                &debug("   word $word rejected because it matched shortword $part");
                &debug("   selecting new words...");
                redo TOP;
            }
            push(@parts, $part);
        }

        # @parts now contains our shortened words from @lwords, now we need
        # to get some separators, numeric and punctuation.  we don't care
        # if there is some duplication at this point.  we generate more of
        # these than we need, but that's okay... we just want to make sure
        # we have enough.

        for (my $j = 0; $j <= scalar(@parts); $j++) {
            push(@num_sep, $numchars[int(rand(scalar(@numchars)))]);
            push(@pun_sep, $punchars[int(rand(scalar(@punchars)))]);
        }

        # build the password, using a part from @parts and alternating separators
        # from @num_sep and @pun_sep
        my $pw = "";
        my $select_num = (rand(1) < 0.5); # start with numbers?
        foreach my $part (@parts) {
            $pw .= $part;
            if ($select_num) {
                $pw .= shift(@num_sep);
            } else {
                $pw .= shift(@pun_sep);
            }
            $select_num = not $select_num; # alternate num & pun separators
        }
        chop($pw);              # remove extra num or pun character
        print $pw, " from ", join(" ", @lwords), "\n";
    }
}

sub load_dict {
    # let's try to locate the dictionary file
    my $dict = shift;

    if (! -e $dict) {
        foreach (@dict_locations) {
            $dict = $_;
            last if -e;
        }
    }
    die "can't find the dictionary\n" unless -e $dict;

    # load the dictionary
    &debug("loading dictionary at $dict");
    open(DICT, $dict);
    while (<DICT>) {
        chomp;

        # save off four-letter words to keep us from using
        # the first or last four letters of a word like 'unable'
        # where 'able' is also a word in it's own right.  note
        # that it's okay to use 'unab' from unable as it isn't
        # a word.
        if (m/^[a-z]{4}$/) {
            $stopwords{$_}++;
        }

        # only load words consisting of lower case letters that are
        # six characters or longer
        next unless $_ =~ m/^[a-z]{6,}$/;
        push(@words, $_);
    }
    close(DICT);
    &debug("found " . scalar(@words) . " words");
}

sub debug {
    return unless $debug;

    warn @_, "\n";
}

sub usage {
    print <<'EOL';
usage: limkpw [ --verbose ] [ --dictionary=dict_location ]
              [ --num-pws=nn ]
       limkpw [ --help ]

     --dictionary specify where the system dictionary is.  by
                  default, the program will look in the following
                    locations:
EOL
    foreach my $dict (@dict_locations) {
        print "                     $dict\n";
    }
    print <<'EOL';
    --num-pws    specify the number of passwords to generate.
    --verbose    print debugging information.
    --help       show this message.
EOL
    exit 1;
}

&main();
exit;
