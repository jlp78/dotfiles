# -*- shell-script -*-

settitle () {
  echo -en "\033]0;$1\a"
}

setenv () {
  export $1="$2"
}

unsetenv () {
  unset $*
}

lr () {
  ls -alR $* | less
}

range () {
  echo '[li p' ${3-1} '+ d si' $2 '!<a] sa' $1 'silax' | dc
}

which () {
  local doall=
  local shellin=
  local usage="usage:  which [ -a ] [ -s ] prog [ prog ... ]
        -a := show all matches
        -s := show path only"

  if [ "$1" = "" ]; then
    echo $usage
    return
  fi
  if [ "$1" = "-a" -o "$1" = "-s" ]; then
    if [ "$1" = "-a" ]; then
      doall=-all
    else
      shellin=-path
    fi
    shift
  fi
  if [ "$1" = "-a" -o "$1" = "-s" ]; then
    if [ "$1" = "-a" ]; then
      doall=-all
    else
      shellin=-path
    fi
    shift
  fi
  if [ "$1" = "" ]; then
    echo $usage
    return
  fi

  while [ "$1" != "" ]
    do

    if [ "$1" != "`basename $1`" ]; then
      echo "which: do not specify a path"
      return
    fi

    type $doall $shellin $1

    shift
    done
}

memorize () {
  if [ -f $MEMORY_FILE ]; then
    echo "-- " >> $MEMORY_FILE
  fi

  case "x$1" in
    x)
      echo "enter text to be memorized"
      cat - >> $MEMORY_FILE
      echo "text has been memorized"
      ;;
    *)
      echo "$@" >> $MEMORY_FILE
      echo "arguments have been memorized"
      ;;
  esac
}

remember () {
  if [ -f $MEMORY_FILE ]; then
    case "x$1" in
      x)
        less $MEMORY_FILE
        ;;
      *)
        grep -i "$1" $MEMORY_FILE | less
        ;;
    esac
  fi
}
