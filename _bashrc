# -*- shell-script -*-
# .bashrc

# run only for interactive non-login shells

# commands here for all shells
# try to work around Ubuntu 12.04 XAUTHORITY settings
# are we on the console *and* running lightdm *and* root?

# get a minimum PATH so we have something to work with
oPATH="$PATH"
PATH=/bin:/usr/bin:/usr/local/bin
export PATH

# this fixes some badness in X access when using sudo
if [ `id -u` -eq 0 ]; then
  if [ "$XAUTHORITY" == "$HOME/.Xauthority" ]; then
    if [ "$DISPLAY" == ":0" ]; then
      x_cmd=`ps guaxww | grep /usr/bin/X | grep -v grep`
      case "$x_cmd" in
        *lightdm*)
          XAUTHORITY=`echo $x_cmd | sed -e 's/^.*-auth //' | awk '{print $1}'`
          export XAUTHORITY
          ;;
      esac
    fi
  fi
fi

# figure out my current hostname
hostcmd=`type -path hostname || type -path uname || type -path uuname`
case $hostcmd in
  */uname*)
           HOST=`$hostcmd` -n
           ;;
  */hostname*)
           HOST=`$hostcmd`
           ;;
  */uuname*)
           HOST=`$hostcmd -l`
           ;;
  *)
           HOST="unknown"
           ;;
esac

# what kind of machine am I on?
if [ -f ~/.mach_type ]; then 
  source ~/.mach_type
else
  # some reasonable defaults
  MACH_TYPE=unknown
  X11=/usr/bin/X11
  LOCALBIN=/usr/local/bin
fi

# set up path stuff
if [ -d ~/bin/$MACH_TYPE ]; then
  MY_BIN=$HOME/bin/scripts:$HOME/bin/$MACH_TYPE
else
  MY_BIN=$HOME/bin/scripts
fi


# extra bin dirs
EBIN=
if [ -e /usr/local/linkedin/bin ]; then
  EBIN=$EBIN:.:/usr/local/linkedin/bin
fi
if [ -e /export/apps/xtools/bin ]; then
  # xtools was a linkedin thing... probably don't need it unless you
  # are at linkedin.
  EBIN=$EBIN:/export/apps/xtools/bin
fi

if [ -e $HOME/pebble-dev ]; then
  PEBBLE_HOME=$HOME/pebble-dev/PebbleSDK-current
  EBIN=$EBIN:$PEBBLE_HOME/bin
  export PEBBLE_HOME
fi

if [ -e $HOME/android-sdk-* ]; then
  EBIN=$EBIN:`echo $HOME/android-sdk-*/tools`
  EBIN=$EBIN:`echo $HOME/android-sdk-*/platform-tools`
fi
if [ -e /usr/local/opt/android-sdk ]; then
  export ANDROID_HOME=/usr/local/opt/android-sdk
fi

# set up the path
PATH=$PREPATH:$MY_BIN:$LOCALBIN:$X11:/usr/ucb:/usr/bin:/bin:/usr/5bin
PATH=$PATH:/usr/etc:/etc:/usr/hosts:/usr/new:/usr/old:$EBIN:/usr/games

# mips and sun have separate bin directories for SysV-ish tools vs. BSD-ish
case $MACH_TYPE in
  mips)
        bsd_path=$PATH
        att_path=$MY_BIN:/bin:/usr/bin:$PATH
        ;;
  sun*)
        bsd_path=$PATH
        att_path=$MY_BIN:/usr/5bin:$PATH
        ;;
  *)
        bsd_path=$PATH
        att_path=$PATH
        ;;
esac

# don't allow group writes, use this if you don't have your own
# private group (pretty much all Linux dists give you a private group
# now, so you probably don't need this... unless you're on a mac?).
if [ `id -un` != `id -gn` ]; then
  umask 022
fi

# don't dump any cores (doesn't work on HP/UX?)
case $MACH_TYPE in
  hp)
        ;;
  *)
        ulimit -c 0
        ;;
esac

# miscellaneous env vars:
EDITOR=`type -path jove || type -path vi`
MORE=-c
LESS=qedm
PAGER=`type -path less || type -path more`
# special hacks for LESS
case $MACH_TYPE in
  linux|macosx)
    LESS="${LESS}X"
    ;;
esac
case $PAGER in
  *less)
    less_version=`$PAGER -V 2>&1 | sed -e 1q | awk '{print $2}'`
    ;;
  *)
    less_version=unknown
    ;;
esac
# some older versions of less did things a little differently, unlikely
# to need this stuff any more
case $less_version in
  332)
    LESS="${LESS}w"
    ;;
  340)
    LESS="${LESS}~"
    ;;
  *)
    LESS="${LESS}wR"
    ;;
esac

# nethack >> rogue
NETHACKOPTIONS="DECgraphics,noconfirm,male,fixinv,nohelp,news,nonull"
NETHACKOPTIONS="${NETHACKOPTIONS},nopickup,norest_on_space,silent"
NETHACKOPTIONS="${NETHACKOPTIONS},sortpack,standout,time,noverbose"
NETHACKOPTIONS="${NETHACKOPTIONS},dogname:Spike,catname:Puff,fruit:mango"

# this is used by tip, or it was, when tip was a thing
REMOTE=~/.remote

XSHELL=`type -path bash`

# when using a mips workstation, this was important.  probably not so
# much any more.
KEYMAP=mips

PGPPATH=$HOME/.pgp
IMM_IMAGE_DIR=$HOME/lib/images
DISPLAY_GAMMA=2.2

# fetch is a BSD thing.
FETCH_CMD="fetch -p"

# old palm pilot support for jpilot.  don't really use this any more.
PILOTRATE=38400
PILOTPORT=/dev/pilot

# MM == mime encode/decode tools, used with NMH and exmh.
MM_CHARSET=iso-8859-1
#LANG=en_US

case "$LANG" in
  *[Uu][Tt][Ff]*)
    ;;
  *)
    # not sure if this is still needed, causes some issues on systems
    # where the default encoding is utf-8
    LESSCHARSET=latin1
    export LESSCHARSET
    ;;
esac

# more linkedin stuff
if [ -e /usr/local/linkedin/man ]; then
  MANPATH="$MANPATH:/usr/local/linkedin/man"
fi

# export all the vars!
export EDITOR MORE LESS MANPATH NETHACKOPTIONS NNTPSERVER PAGER PRINTER
export REMOTE XSHELL KEYMAP PGPPATH IMM_IMAGE_DIR DISPLAY_GAMMA FETCH_CMD
export PILOTRATE PILOTPORT MM_CHARSET LANG

# do we have keybase?  (can't use qtype here because we haven't loaded
# our .bash_funs yet... and we don't want to load them until after we
# have set up MEMORY_FILE)
if type keybase >/dev/null 2>&1; then
  if keybase status 2>&1 | grep -sq "connect: no such file or directory"; then
    echo -n "waiting up to 30 seconds for keybase"
    ct=0
    while [ $ct -lt 30 ]; do
      if keybase status 2>&1 |
          grep -sq "connect: no such file or directory"; then
        :
      else
        break
      fi
      ct=`expr $ct + 1`
      sleep 1
      echo -ne "\rwaiting up to 30 seconds for keybase $ct"
    done
  fi
    
  KB_USER=`keybase status | grep ^Username | awk '{print $NF}'`
fi

# got a Dropbox or keybase mounted?  use that for persistent memory
# storage. otherwise use a local file.
for db in "/Volumes/Keybase ($USER)/private/$KB_USER" \
	    "/keybase/private/$KB_USER" \
	    "Dropbox (Personal)" \
	    "Dropbox"; do
  case "$db" in
    /*) ;;
    *)  db="$HOME/$db" ;;
  esac
  if [ -e "$db/memory.txt" ]; then
    MEMORY_FILE="$db/memory.txt"
    break
  fi
done
if [ ! -e "$MEMORY_FILE" ]; then
  MEMORY_FILE="$HOME/.memory"
fi

# load shell functions
if [ -f ~/.bash_funs ]; then source ~/.bash_funs; fi
# and aliases
if [ -f ~/.bash_aliases ]; then source ~/.bash_aliases; fi

# Source global definitions
if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

# this doesn't appear to be working the way I want it to, need to
# play with it some more.  the intention is to automatically update
# the history behind the scenes whenever a command prompt is shown,
# no matter which shell it is in.
trap 'history -r' USR1

# do I have a prompt already?  then I'm probably an interactive shell.
if [ "$PS1" -a ! "$RUNNING_CSSHX" ]; then

  # interactive shell
  interactive=true

  # stick some git branch and status info in the prompt if in a git
  # working directory.  this magic comes courtesy of Shawn O. Pearce.
  # https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
  if [ -e ~/lib/sh/git-prompt.sh ]; then
    . ~/lib/sh/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=t
    GIT_PS1_SHOWSTASHSTATE=t
    GIT_PS1_SHOWUNTRACKEDFILES=t
    GIT_PS1_SHOWUPSTREAM="auto"
    GIT_PS1_SHOWCOLORHINTS=t
  fi

  # prompt string looks like "user@host:working/directory history bash$ "
  # but it is really managed by the prompt_update command, see .bash_funs
  PS1="\u@\h:\w \! bash\\\$ "
  PROMPT_DIRTRIM=2
  PROMPT_COMMAND='prompt_update'

  # I used to play a game of Traveller via e-mail.  Had a different MH
  # config for use when playing and this was to help me know if my current
  # shell was in PBEM mode or not.  http://www.shoestring-graphics.com/traveller/
  # has historical info about the game and a log of the mail associated with
  # the game.  I haven't looked at this stuff in a looooooong time.
  if test -n "$PBEMMODE"; then
    PS1="PBEM: $PS1"
  fi

  # interactive-only variables
  shopt -s checkhash
  # shopt -s checkjobs		# I don't remember why I don't use this any more
  shopt -s checkwinsize
  shopt -s cmdhist

  HISTCONTROL=ignorespace:ignoredups:erasedups
  HISTTIMEFORMAT="%F %T "
  HISTFILESIZE=5000
  HISTSIZE=5000
  MAILCHECK=60
  auto_resume=
  no_exit_on_failed_exec=
  notify=

  if test -t; then
    # we are talking to a tty
    # stty dec  some unixes don't have this?!
    stty erase '^?' intr '^C' kill '^U' eof '^D' susp '^Z'
    if stty -a | grep -sq werase; then
      stty werase '^W'
    fi
    # stiffle "talk" requests... but no one uses that any more, anyway.
    qtype mesg && mesg n
  fi

  # terminal management for use with UW.  UW was the "windowing"
  # system on the AT&T 7300.  I had one of these at home for a
  # few years to use as a terminal.  This is where the "s4"
  # terminal type came from.  The 7300 was also known as the 3b1.
  # http://toastytech.com/guis/unixpc.html.  Also see http://www.unixpc.org/.
  if [ $TERM = s4 ]; then export UW_TERM="s4"; fi
  if [ $TERM = vt100 ]; then export UW_TERM="vt100"; fi
  if [ $TERM = ansi ]; then export UW_TERM="ansi"; fi

  if [ $TERM = adm31 ]; then
    if test -n "$UW_TERM" ; then
      export TERM=$UW_TERM
      export TERMCAP=$HOME/.termcap
#     stty 2400 >/dev/tty
    fi
  fi
  # UW took advantage of shell layers, too.  I also used shell layers
  # on the 3b2.
  if [ x$LAYER != x ]; then
    export TERMINFO=$HOME/.terminfo
  fi

  # this was for systems that didn't have the terminal size in the tty structure.
  # the resize command output commands to set the ROWS and COLUMNS environment
  # variables.
  #if [ x$WINDOWID != x ]; then
  #  eval `resize`
  #fi
fi

# homebrew is for additional software on MacOS X.  http://brew.sh
#export HOMEBREW_GITHUB_API_TOKEN=SECRET:12d1bec63b6258041b213adffe8d797d91668e52:SECRET

# some python stuff here... pyenv is a slick mechanism for having different
# python builds installed that you can use with different projects.
export PYENV_ROOT=$HOME/.pyenv
mkdir -p "$PYENV_ROOT"
qtype pyenv && eval "$(pyenv init -)"
qtype pyenv-virtualenv-init && eval "$(pyenv virtualenv-init -)"

# pyenv completion from
# https://github.com/pyenv/pyenv/blob/master/completions/pyenv.bash
_pyenv() {
  COMPREPLY=()
  local word="${COMP_WORDS[COMP_CWORD]}"

  if [ "$COMP_CWORD" -eq 1 ]; then
    COMPREPLY=( $(compgen -W "$(pyenv commands)" -- "$word") )
  else
    local words=("${COMP_WORDS[@]}")
    unset words[0]
    unset words[$COMP_CWORD]
    local completions=$(pyenv completions "${words[@]}")
    COMPREPLY=( $(compgen -W "$completions" -- "$word") )
  fi
}
complete -F _pyenv pyenv

# more pyenv stuff for verisys
if [ "$VERISYS_CONFIG" ]; then
  PATH=/usr/local/share/python:$PATH
  export WORKON_HOME=$HOME/.virtualenvs
  if [[ -x /usr/local/bin/python2.7 ]]; then
    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7
  elif [[ -x /usr/bin/python2.7 ]]; then
    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2.7
  elif qtype python2.7; then
    export VIRTUALENVWRAPPER_PYTHON=`which -p python2.7`
  fi
  export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
  # we handle the prompt in our prompt_update function
  export VIRTUAL_ENV_DISABLE_PROMPT=t
  export PIP_VIRTUALENV_BASE=$WORKON_HOME
  export PIP_RESPECT_VIRTUALENV=true
  if [[ -r /usr/local/bin/virtualenvwrapper.sh ]]; then
    . /usr/local/bin/virtualenvwrapper.sh
  elif [[ -r /usr/bin/virtualenvwrapper.sh ]]; then
    . /usr/bin/virtualenvwrapper.sh
  elif qtype virtualenvwrapper.sh; then
    . `which -p virtualenvwrapper.sh`
  fi
fi

# bash completion
for base in "" "/usr/local" "/opt/homebrew"; do
  if [ -e ${base}/etc/bash_completion ]; then
    . ${base}/etc/bash_completion
  fi
  if [ -e ${base}/etc/bash_completion.d ]; then
    for f in ${base}/etc/bash_completion.d/*; do
      . $f
    done
  fi
done

# Okta AWS authentication
if [[ -f "$HOME/.okta/bash_functions" ]]; then
  . "$HOME/.okta/bash_functions"
fi
if [[ -d "$HOME/.okta/bin" && ":$PATH:" != *":$HOME/.okta/bin:"* ]]; then
  PATH="$HOME/.okta/bin:$PATH"
fi

# Chartbeat
# pants wants a lot of open files
ulimit -n 17000
# direnv setup
eval "$(direnv hook bash)"

# clean up the PATH (get rid of duplicates, missing dirs, and blank entries)
PATH=`perl -e '
  $path = $ENV{PATH};
  @path_elements = split(m/:/, $path);
  foreach $element (@path_elements) {
    next if $element eq "";
    next unless -d $element;
    push(@new_path, $element);
  }
  $newpath = join(":", @new_path);
  print "$newpath\n"; '`
export PATH

# dump path to temp file for other apps to pick up
echo $PATH > ~/.mypath

