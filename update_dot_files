#! /usr/bin/perl

# update_dot_files - copy files in the current directory that start
#                    with an underscore (_) over files starting with
#                    a dot (.) in the user's home directory.

use strict;

use File::Basename;
use File::Compare;
use File::Find;
use File::Copy;
use File::Path qw(mkpath);
use Getopt::Long qw(GetOptions);

our $force;
our $terse;
our @files;
our @needs_update;
our @local_mods;

our $usage = <<EOL;
usage: $0 [--force] [--terse] [-ft]
       --force (-f) force updates even if there are local mods
       --terse (-t) terse (machine readable) output
EOL

Getopt::Long::Configure("bundling");
GetOptions('f|force' => \$force,
           't|terse' => \$terse) or die $usage;

# map file from Git name to full path of installed file
sub map_file {
    my $ufile = shift;
    my $dfile = $ufile;
    $dfile =~ s/^_/./;
    $dfile = $ENV{HOME} . '/' . $dfile;
    return $dfile;
}

# find all files that either start with _ or are in directories
# that start with _, build list into @files
find({ wanted => sub { -f $_ and push(@files, $_); },
       no_chdir => 1,}, <_*>);

foreach my $ufile (@files) {
    $ufile =~ s,^\./,,;
    my $dfile = map_file($ufile);

    if (not -e $dfile) {
        push(@needs_update, $ufile);
    } elsif (compare($dfile, $ufile)) {
        # files are different, check dates
        if (-M $dfile < -M $ufile) {
            push(@local_mods, $ufile);
        } else {
            push(@needs_update, $ufile);
        }
    }
}

if (scalar(@local_mods) > 0) {
    print "These files have local mods:\n"
        unless $terse;
    foreach my $file (@local_mods) {
        print "local_mod" if $terse;
        print "  ", $file;
	print " ", map_file($file) unless $terse;
	print "\n";
    }
    if ($force) {
        print "Updating them, anyway.\n"
            unless $terse;
        push(@needs_update, @local_mods);
    } else {
        print "Not updating them.\n"
            unless $terse;
    }
}

if (scalar(@needs_update)) {
    print "Updating ...\n"
        unless $terse;
    foreach my $ufile (@needs_update) {
        my $dfile = $ufile;
        $dfile =~ s,^_,.,;
        $dfile = $ENV{HOME} . '/' . $dfile;
        print "  " unless $terse;
	mkpath(dirname($dfile));
        print "copying $ufile over $dfile\n";
        copy($ufile, $dfile);
    }
    print "done.\n"
        unless $terse;
} else {
    print "Nothing to do.\n"
        unless $terse;
}
